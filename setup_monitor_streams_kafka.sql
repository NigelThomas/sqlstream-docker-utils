-- setup_monitor_streams.sql
--
-- these pipelines take data from ALL_TRACE and telemetry and insert all into a single Kafka topic
-- the data type is passed as a header called TYPE (eg type=TRACE_ALL)

!set force on
ALTER PUMP "SQLstream_Monitor_Kafka".* STOP;
DROP SCHEMA "SQLstream_Monitor_Kafka" CASCADE;
!set force off

CREATE OR REPLACE SCHEMA "SQLstream_Monitor_Kafka";
set schema '"SQLstream_Monitor_Kafka"';

-- expose the ALL_TRACE view

create or replace FOREIGN STREAM "TRACE_ALL"
("EVENT_TYPE" VARCHAR(20)
,"ERROR_TIME" TIMESTAMP
,"ERROR_LEVEL" VARCHAR(10)
,"IS_ERROR" BOOLEAN
,"ERROR_CLASS" INTEGER
,"ERROR_NAME" VARCHAR(32)
,"SQL_STATE" VARCHAR(5)
,"MESSAGE" VARCHAR(4096)
,"THREAD_ID" INTEGER
,"SESSION_ID" INTEGER
,"STATEMENT_ID" INTEGER
,"GRAPH_ID" INTEGER
,"NODE_ID" INTEGER
,"XO_NAME" VARCHAR(128)
,"ERROR_REPORTER" VARCHAR(256)
,"ERROR_SQL" VARCHAR(256)
,"ERROR_BACKTRACE" VARCHAR(4096)
,"DATA_ROWTIME" TIMESTAMP
,"DATA_ROW" VARCHAR(32768)                    
,"SOURCE_POSITION_KEY" VARCHAR(4096)
,"PUMP_DB" VARCHAR(128)
,"PUMP_SCHEMA" VARCHAR(128)
,"PUMP_NAME" VARCHAR(128)
)
SERVER KAFKA10_SERVER
OPTIONS 
( "FORMATTER" 'JSON'
, "FORMATTER_INCLUDE_ROWTIME" 'false'
, "bootstrap.servers" 'localhost:9092'
, "TOPIC" 'monitor'
)
;

create or replace pump TRACE_ALL_PUMP
as
INSERT INTO TRACE_ALL
("EVENT_TYPE"
,"ERROR_TIME"
,"ERROR_LEVEL"
,"IS_ERROR"
,"ERROR_CLASS"
,"ERROR_NAME"
,"SQL_STATE"
,"MESSAGE"
,"THREAD_ID"
,"SESSION_ID"
,"STATEMENT_ID"
,"GRAPH_ID"
,"NODE_ID"
,"XO_NAME"
,"ERROR_REPORTER"
,"ERROR_SQL"
,"ERROR_BACKTRACE"
,"DATA_ROWTIME"
,"DATA_ROW"
,"SOURCE_POSITION_KEY"
,"PUMP_DB"
,"PUMP_SCHEMA"
,"PUMP_NAME"
)
select stream 
     'TRACE_ALL' as "EVENT_TYPE"
    ,"ERROR_TIME"
    ,"ERROR_LEVEL"
    ,"IS_ERROR"
    ,"ERROR_CLASS"
    ,"ERROR_NAME"
    ,"SQL_STATE"
    ,"MESSAGE"
    ,"THREAD_ID"
    ,"SESSION_ID"
    ,"STATEMENT_ID"
    ,"GRAPH_ID"
    ,"NODE_ID"
    ,"XO_NAME"
    ,"ERROR_REPORTER"
    ,"ERROR_SQL"
    ,"ERROR_BACKTRACE"
    ,"DATA_ROWTIME"
    ,CASE WHEN "DATA_ROW" IS NULL THEN CAST(NULL AS VARCHAR(32768)) ELSE CAST(SYS_BOOT.MGMT.VARBINARY_TO_VARCHAR("DATA_ROW") AS VARCHAR(32768)) END
    ,"SOURCE_POSITION_KEY"
    ,"PUMP_DB"
    ,"PUMP_SCHEMA"
    ,"PUMP_NAME"
from SYS_BOOT.MGMT.ALL_TRACE
;


-- expose telemetry - every 15 seconds

create or replace FOREIGN STREAM TELEMETRY_SERVER
("EVENT_TYPE" VARCHAR(20)
,"MEASURED_AT" TIMESTAMP
,"IS_RUNNING" BOOLEAN
,"IS_LICENSED" BOOLEAN
,"LICENSE_KIND" VARCHAR(32)
,"LICENSE_VERSION" VARCHAR(32)
,"IS_THROTTLED" BOOLEAN
,"NUM_SESSIONS" INTEGER
,"NUM_STATEMENTS" INTEGER
,"STARTED_AT" TIMESTAMP
,"THROTTLED_AT" TIMESTAMP
,"THROTTLE_LEVEL" DOUBLE
,"NUM_EXEC_THREADS" INTEGER
,"NUM_STREAM_GRAPHS_OPEN" INTEGER
,"NUM_STREAM_GRAPHS_CLOSED" INTEGER
,"NUM_STREAM_OPERATORS" INTEGER
,"NUM_STREAM_GRAPHS_OPEN_EVER" INTEGER
,"NUM_STREAM_GRAPHS_CLOSED_EVER" INTEGER
,"NET_MEMORY_BYTES" BIGINT
,"MAX_MEMORY_BYTES" BIGINT
,"USAGE_AT" TIMESTAMP
,"USAGE_SINCE" TIMESTAMP
,"USAGE_REPORTED_AT" TIMESTAMP
,"NET_INPUT_BYTES" BIGINT
,"NET_OUTPUT_BYTES" BIGINT
,"NET_INPUT_BYTES_TODAY" BIGINT
)
SERVER KAFKA10_SERVER
OPTIONS 
( "FORMATTER" 'JSON'
, "FORMATTER_INCLUDE_ROWTIME" 'false'
, "bootstrap.servers" 'localhost:9092'
, "TOPIC" 'monitor'
);

CREATE OR REPLACE PUMP TELEMETRY_SERVER_PUMP STOPPED 
as
INSERT INTO TELEMETRY_SERVER
SELECT STREAM 
       'TLMTRY_SRVR' AS "EVENT_TYPE"
    ,  * 
from STREAM(sys_boot.mgmt.getServerInfoForever(15));

create or replace FOREIGN STREAM TELEMETRY_STREAM_GRAPH
("EVENT_TYPE" VARCHAR(20)
,"MEASURED_AT" TIMESTAMP
,"GRAPH_ID" INTEGER
,"STATEMENT_ID" INTEGER
,"SESSION_ID" INTEGER
,"SOURCE_SQL" VARCHAR(2048)
,"SCHED_STATE" CHAR(1)
,"CLOSE_MODE" CHAR(6)
,"IS_GLOBAL_NEXUS" BOOLEAN
,"IS_AUTO_CLOSE" BOOLEAN
,"NUM_NODES" INTEGER
,"NUM_LIVE_NODES" INTEGER
,"NUM_DATA_BUFFERS" INTEGER
,"TOTAL_EXECUTION_TIME" DOUBLE
,"TOTAL_OPENING_TIME" DOUBLE
,"TOTAL_CLOSING_TIME" DOUBLE
,"NET_INPUT_BYTES" BIGINT
,"NET_INPUT_ROWS" BIGINT
,"NET_INPUT_RATE" DOUBLE
,"NET_INPUT_ROW_RATE" DOUBLE
,"NET_OUTPUT_BYTES" BIGINT
,"NET_OUTPUT_ROWS" BIGINT
,"NET_OUTPUT_RATE" DOUBLE
,"NET_OUTPUT_ROW_RATE" DOUBLE
,"NET_MEMORY_BYTES" BIGINT
,"MAX_MEMORY_BYTES" BIGINT
,"WHEN_OPENED" TIMESTAMP
,"WHEN_STARTED" TIMESTAMP
,"WHEN_FINISHED" TIMESTAMP
,"WHEN_CLOSED" TIMESTAMP
)
SERVER KAFKA10_SERVER
OPTIONS 
( "FORMATTER" 'JSON'
, "FORMATTER_INCLUDE_ROWTIME" 'false'
, "bootstrap.servers" 'localhost:9092'
, "TOPIC" 'monitor'
)
;


CREATE OR REPLACE PUMP TELEMETRY_STREAM_GRAPH_PUMP STOPPED
as 
INSERT INTO TELEMETRY_STREAM_GRAPH
SELECT STREAM 'TLMTRY_STRM_GRPH' AS "EVENT_TYPE"
     , * 
from STREAM(sys_boot.mgmt.getStreamGraphInfoForever(0, 15));

CREATE OR REPLACE FOREIGN STREAM TELEMETRY_STREAM_OPERATOR
("EVENT_TYPE" VARCHAR(20)
,"MEASURED_AT" TIMESTAMP
,"NODE_ID" VARCHAR(8)
,"GRAPH_ID" INTEGER
,"SOURCE_SQL" VARCHAR(1024)
,"QUERY_PLAN" VARCHAR(1024)
,"NAME_IN_QUERY_PLAN" VARCHAR(64)
,"NUM_INPUTS" INTEGER
,"INPUT_NODES" VARCHAR(64)
,"NUM_OUTPUTS" INTEGER
,"OUTPUT_NODES" VARCHAR(64)
,"SCHED_STATE" CHAR(2)
,"LAST_EXEC_RESULT" CHAR(3)
,"NUM_BUSY_NEIGHBORS" INTEGER
,"INPUT_ROWTIME_CLOCK" TIMESTAMP
,"OUTPUT_ROWTIME_CLOCK" TIMESTAMP
,"EXECUTION_COUNT" BIGINT
,"STARTED_AT" TIMESTAMP
,"LATEST_AT" TIMESTAMP
,"NET_EXECUTION_TIME" DOUBLE
,"NET_SCHEDULE_TIME" DOUBLE
,"NET_INPUT_BYTES" BIGINT
,"NET_INPUT_ROWS" BIGINT
,"NET_INPUT_RATE" DOUBLE
,"NET_INPUT_ROW_RATE" DOUBLE
,"NET_OUTPUT_BYTES" BIGINT
,"NET_OUTPUT_ROWS" BIGINT
,"NET_OUTPUT_RATE" DOUBLE
,"NET_OUTPUT_ROW_RATE" DOUBLE
,"NET_MEMORY_BYTES" BIGINT
,"MAX_MEMORY_BYTES" BIGINT
)
SERVER KAFKA10_SERVER
OPTIONS 
( "FORMATTER" 'JSON'
, "FORMATTER_INCLUDE_ROWTIME" 'false'
, "bootstrap.servers" 'localhost:9092'
, "TOPIC" 'monitor'
);


CREATE OR REPLACE PUMP TELEMETRY_STREAM_OPERATOR_PUMP STOPPED
as 
INSERT INTO TELEMETRY_STREAM_OPERATOR
SELECT STREAM 'TLMTRY_STRM_OPRTR' AS "EVENT_TYPE"
      ,* 
from STREAM(sys_boot.mgmt.getStreamOperatorInfoForever(0, 15));


